from matplotlib import pyplot
from keras.datasets import fashion_mnist
import tensorflow as tf

# load dataset
(trainX, trainy), (testX, testy) = tf.keras.datasets.fashion_mnist.load_data()
# summarize loaded dataset
print('Train: X=%s, y=%s' % (trainX.shape, trainy.shape))
print('Test: X=%s, y=%s' % (testX.shape, testy.shape))
# plot first few images
for i in range(9):
	# define subplot
	pyplot.subplot(330 + 1 + i)
	# plot raw pixel data
	pyplot.imshow(trainX[i], cmap=pyplot.get_cmap('gray'))
# show the figure
pyplot.show()
import tensorflow as tf
from tensorflow import keras
#import keras
import matplotlib.pyplot as plt
import numpy as np
print(tf.__version__)
'''Import the Fashion MNIST dataset'''
fashion_mnist = keras.datasets.fashion_mnist
(train_images, train_labels),(test_images, test_labels) = tf.keras.datasets.fashion_mnist.load_data()
'''Crating Labels names'''

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
       '''Explore the data'''

#train_images.shape

'''Len'''
len(train_labels)
#Each label is an integer between 0 and 9:
train_labels
test_images.shape
plt.figure()
plt.imshow(train_images[0])

plt.colorbar()
plt.gca().grid(False)
train_images = train_images / 255.0
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid('off')
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
    #Building the neural network requires configuring the layers of the model, then compiling the model.

model = keras.Sequential([
        keras.layers.Flatten(input_shape=(28,28)),
        keras.layers.Dense(128, activation = tf.nn.relu),
        keras.layers.Dense(10, activation=tf.nn.softmax),
        ])
        tf.compat.v1.train.AdamOptimizer()

tf.optimizers.Adam()
model.compile(optimizer=tf.optimizers.Adam(), loss="sparse_categorical_crossentropy")
model.compile(optimizer=tf.keras.optimizers.RMSprop(1e-4), 
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
              '''Train the model'''
#Feed the training data to the model—in this example, the train_images and train_labels arrays.
#To start training, call the model.fit method—the model is "fit" to the training data:

model.fit(train_images, train_labels, epochs = 5)

'''Evaluate accuracy'''

#Next, compare how the model performs on the test dataset:

test_loss, test_acc = model.evaluate(test_images,test_labels)
print('Test Accuracy:', test_acc)
'''Make predictions'''

#With the model trained, we can use it to make predictions about some images.s

predictions = model.predict(test_images)
'''Let's plot several images with their predictions. Correct prediction labels are green 
and incorrect prediction labels are red.'''

# Plot the first 25 test images, their predicted label, and the true label
# Color correct predictions in green, incorrect predictions in red


plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid('off')
    plt.imshow(test_images[i], cmap=plt.cm.binary)
    predicted_label = np.argmax(predictions[i])
    true_label = test_labels[i]
    if predicted_label == true_label:
      color = 'green'
    else:
      color = 'red'
    plt.xlabel("{} ({})".format(class_names[predicted_label], 
                                  class_names[true_label]),
                                  color=color)

test_images = test_images / 255.0
